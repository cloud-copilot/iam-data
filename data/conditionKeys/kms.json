{
  "aws:requesttag/${tagkey}": {
    "key": "aws:RequestTag/${TagKey}",
    "description": "Filters access to the specified AWS KMS operations based on both the key and value of the tag in the request",
    "type": "String"
  },
  "aws:resourcetag/${tagkey}": {
    "key": "aws:ResourceTag/${TagKey}",
    "description": "Filters access to the specified AWS KMS operations based on tags assigned to the AWS KMS key",
    "type": "String"
  },
  "aws:tagkeys": {
    "key": "aws:TagKeys",
    "description": "Filters access to the specified AWS KMS operations based on tag keys in the request",
    "type": "ArrayOfString"
  },
  "kms:bypasspolicylockoutsafetycheck": {
    "key": "kms:BypassPolicyLockoutSafetyCheck",
    "description": "Filters access to the CreateKey and PutKeyPolicy operations based on the value of the BypassPolicyLockoutSafetyCheck parameter in the request",
    "type": "Bool"
  },
  "kms:calleraccount": {
    "key": "kms:CallerAccount",
    "description": "Filters access to specified AWS KMS operations based on the AWS account ID of the caller. You can use this condition key to allow or deny access to all IAM users and roles in an AWS account in a single policy statement",
    "type": "String"
  },
  "kms:customermasterkeyspec": {
    "key": "kms:CustomerMasterKeySpec",
    "description": "The kms:CustomerMasterKeySpec condition key is deprecated. Instead, use the kms:KeySpec condition key",
    "type": "String"
  },
  "kms:customermasterkeyusage": {
    "key": "kms:CustomerMasterKeyUsage",
    "description": "The kms:CustomerMasterKeyUsage condition key is deprecated. Instead, use the kms:KeyUsage condition key",
    "type": "String"
  },
  "kms:datakeypairspec": {
    "key": "kms:DataKeyPairSpec",
    "description": "Filters access to GenerateDataKeyPair and GenerateDataKeyPairWithoutPlaintext operations based on the value of the KeyPairSpec parameter in the request",
    "type": "String"
  },
  "kms:encryptionalgorithm": {
    "key": "kms:EncryptionAlgorithm",
    "description": "Filters access to encryption operations based on the value of the encryption algorithm in the request",
    "type": "String"
  },
  "kms:encryptioncontext:${encryptioncontextkey}": {
    "key": "kms:EncryptionContext:${EncryptionContextKey}",
    "description": "Filters access to a symmetric AWS KMS key based on the encryption context in a cryptographic operation. This condition evaluates the key and value in each key-value encryption context pair",
    "type": "String"
  },
  "kms:encryptioncontextkeys": {
    "key": "kms:EncryptionContextKeys",
    "description": "Filters access to a symmetric AWS KMS key based on the encryption context in a cryptographic operation. This condition key evaluates only the key in each key-value encryption context pair",
    "type": "ArrayOfString"
  },
  "kms:expirationmodel": {
    "key": "kms:ExpirationModel",
    "description": "Filters access to the ImportKeyMaterial operation based on the value of the ExpirationModel parameter in the request",
    "type": "String"
  },
  "kms:grantconstrainttype": {
    "key": "kms:GrantConstraintType",
    "description": "Filters access to the CreateGrant operation based on the grant constraint in the request",
    "type": "String"
  },
  "kms:grantisforawsresource": {
    "key": "kms:GrantIsForAWSResource",
    "description": "Filters access to the CreateGrant operation when the request comes from a specified AWS service",
    "type": "Bool"
  },
  "kms:grantoperations": {
    "key": "kms:GrantOperations",
    "description": "Filters access to the CreateGrant operation based on the operations in the grant",
    "type": "ArrayOfString"
  },
  "kms:granteeprincipal": {
    "key": "kms:GranteePrincipal",
    "description": "Filters access to the CreateGrant operation based on the grantee principal in the grant",
    "type": "String"
  },
  "kms:keyagreementalgorithm": {
    "key": "kms:KeyAgreementAlgorithm",
    "description": "Filters access to the DeriveSharedSecret operation based on the value of the KeyAgreementAlgorithm parameter in the request",
    "type": "String"
  },
  "kms:keyorigin": {
    "key": "kms:KeyOrigin",
    "description": "Filters access to an API operation based on the Origin property of the AWS KMS key created by or used in the operation. Use it to qualify authorization of the CreateKey operation or any operation that is authorized for a KMS key",
    "type": "String"
  },
  "kms:keyspec": {
    "key": "kms:KeySpec",
    "description": "Filters access to an API operation based on the KeySpec property of the AWS KMS key that is created by or used in the operation. Use it to qualify authorization of the CreateKey operation or any operation that is authorized for a KMS key resource",
    "type": "String"
  },
  "kms:keyusage": {
    "key": "kms:KeyUsage",
    "description": "Filters access to an API operation based on the KeyUsage property of the AWS KMS key created by or used in the operation. Use it to qualify authorization of the CreateKey operation or any operation that is authorized for a KMS key resource",
    "type": "String"
  },
  "kms:macalgorithm": {
    "key": "kms:MacAlgorithm",
    "description": "Filters access to the GenerateMac and VerifyMac operations based on the MacAlgorithm parameter in the request",
    "type": "String"
  },
  "kms:messagetype": {
    "key": "kms:MessageType",
    "description": "Filters access to the Sign and Verify operations based on the value of the MessageType parameter in the request",
    "type": "String"
  },
  "kms:multiregion": {
    "key": "kms:MultiRegion",
    "description": "Filters access to an API operation based on the MultiRegion property of the AWS KMS key created by or used in the operation. Use it to qualify authorization of the CreateKey operation or any operation that is authorized for a KMS key resource",
    "type": "Bool"
  },
  "kms:multiregionkeytype": {
    "key": "kms:MultiRegionKeyType",
    "description": "Filters access to an API operation based on the MultiRegionKeyType property of the AWS KMS key created by or used in the operation. Use it to qualify authorization of the CreateKey operation or any operation that is authorized for a KMS key resource",
    "type": "String"
  },
  "kms:primaryregion": {
    "key": "kms:PrimaryRegion",
    "description": "Filters access to the UpdatePrimaryRegion operation based on the value of the PrimaryRegion parameter in the request",
    "type": "String"
  },
  "kms:reencryptonsamekey": {
    "key": "kms:ReEncryptOnSameKey",
    "description": "Filters access to the ReEncrypt operation when it uses the same AWS KMS key that was used for the Encrypt operation",
    "type": "Bool"
  },
  "kms:recipientattestation:imagesha384": {
    "key": "kms:RecipientAttestation:ImageSha384",
    "description": "Filters access to the Decrypt, DeriveSharedSecret, GenerateDataKey, GenerateDataKeyPair, and GenerateRandom operations based on the image hash in the attestation document in the request",
    "type": "String"
  },
  "kms:recipientattestation:pcr": {
    "key": "kms:RecipientAttestation:PCR",
    "description": "Filters access to the Decrypt, GenerateDataKey, and GenerateRandom operations based on the platform configuration registers (PCRs) in the attestation document in the request",
    "type": "String"
  },
  "kms:replicaregion": {
    "key": "kms:ReplicaRegion",
    "description": "Filters access to the ReplicateKey operation based on the value of the ReplicaRegion parameter in the request",
    "type": "String"
  },
  "kms:requestalias": {
    "key": "kms:RequestAlias",
    "description": "Filters access to cryptographic operations, DescribeKey, and GetPublicKey based on the alias in the request",
    "type": "String"
  },
  "kms:resourcealiases": {
    "key": "kms:ResourceAliases",
    "description": "Filters access to specified AWS KMS operations based on aliases associated with the AWS KMS key",
    "type": "ArrayOfString"
  },
  "kms:retiringprincipal": {
    "key": "kms:RetiringPrincipal",
    "description": "Filters access to the CreateGrant operation based on the retiring principal in the grant",
    "type": "String"
  },
  "kms:rotationperiodindays": {
    "key": "kms:RotationPeriodInDays",
    "description": "Filters access to the EnableKeyRotation operation based on the value of the RotationPeriodInDays parameter in the request",
    "type": "Numeric"
  },
  "kms:schedulekeydeletionpendingwindowindays": {
    "key": "kms:ScheduleKeyDeletionPendingWindowInDays",
    "description": "Filters access to the ScheduleKeyDeletion operation based on the value of the PendingWindowInDays parameter in the request",
    "type": "Numeric"
  },
  "kms:signingalgorithm": {
    "key": "kms:SigningAlgorithm",
    "description": "Filters access to the Sign and Verify operations based on the signing algorithm in the request",
    "type": "String"
  },
  "kms:validto": {
    "key": "kms:ValidTo",
    "description": "Filters access to the ImportKeyMaterial operation based on the value of the ValidTo parameter in the request. You can use this condition key to allow users to import key material only when it expires by the specified date",
    "type": "Date"
  },
  "kms:viaservice": {
    "key": "kms:ViaService",
    "description": "Filters access when a request made on the principal's behalf comes from a specified AWS service",
    "type": "String"
  },
  "kms:wrappingalgorithm": {
    "key": "kms:WrappingAlgorithm",
    "description": "Filters access to the GetParametersForImport operation based on the value of the WrappingAlgorithm parameter in the request",
    "type": "String"
  },
  "kms:wrappingkeyspec": {
    "key": "kms:WrappingKeySpec",
    "description": "Filters access to the GetParametersForImport operation based on the value of the WrappingKeySpec parameter in the request",
    "type": "String"
  }
}